/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 18:07:09 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.Locale;
import main.java.Cliente;
import main.java.Coordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cliente_ESTest extends Cliente_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM(1802.0571514691);
      Cliente cliente1 = cliente0.clone();
      cliente0.setNKM(0.0);
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setNAlugueres((-2091));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-2091), cliente0.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setClassificacao(1114);
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(1114, cliente0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(1579.136718806, 1579.136718806);
      Cliente cliente0 = new Cliente("1", "1", "!e6*]5sn,1", "1", "NIF: ", mockGregorianCalendar0, coordinate0);
      cliente0.getPosicao();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate((-611.58019), (-611.58019));
      Cliente cliente0 = new Cliente((String) null, "Email: ", (String) null, "c0Qy/.", "", mockGregorianCalendar0, coordinate0);
      cliente0.getPosicao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM(1802.0571514691);
      double double0 = cliente0.getNKm();
      assertEquals(1802.0571514691, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      
      cliente0.setNKM((-1.0));
      double double0 = cliente0.getNKm();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(2347);
      int int0 = cliente0.getNAlugueres();
      assertEquals(2347, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2159.960219970429, 2159.960219970429);
      Cliente cliente0 = new Cliente("main.java.Coordinate", "main.java.Coordinate", "main.java.Coordinate", "main.java.Coordinate", "main.java.Coordinate", (GregorianCalendar) null, coordinate0);
      cliente0.setNAlugueres((-495));
      int int0 = cliente0.getNAlugueres();
      assertEquals((-495), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao(555);
      int int0 = cliente0.getClassificacao();
      assertEquals(555, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Cliente cliente0 = new Cliente(", ", ", ", "cQ>uUJ~SzYQ~w", "XcbszY4m@7", ", ", gregorianCalendar0, coordinate0);
      cliente0.setClassificacao((-2875));
      int int0 = cliente0.getClassificacao();
      assertEquals((-2875), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      
      cliente0.setNKM((-1.0));
      cliente0.clone();
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(2347);
      cliente0.clone();
      assertEquals(2347, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres((-2102));
      cliente0.clone();
      assertEquals((-2102), cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao(555);
      cliente0.clone();
      assertEquals(555, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao((-1035));
      cliente0.clone();
      assertEquals((-1035), cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 0);
      Cliente cliente0 = new Cliente("Posi\u00E7\u00E3o em que o cliente se encontra: ", "Posi\u00E7\u00E3o em que o cliente se encontra: ", "", "", "Classifica\u00E7\u00E3o do cliente: ", mockGregorianCalendar0, (Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-1885.09), 1214.95323);
      Cliente cliente0 = new Cliente("=)M", "=)M", "=)M", "7xrr\"1Ao<G\"@]|bR/$", "", mockGregorianCalendar0, coordinate0);
      mockGregorianCalendar0.set(0, (-6789));
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setNIF((String) null);
      // Undeclared exception!
      try { 
        cliente1.equals(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cliente cliente0 = null;
      try {
        cliente0 = new Cliente((Cliente) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getClassificacao();
      assertEquals(0, int0);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      double double0 = cliente0.getNKm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = cliente0.getPosicao();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getNAlugueres();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente1.setNKM(1114);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(1114.0, cliente1.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente1.setNAlugueres((-2102));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-2102), cliente1.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setClassificacao(3626);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(3626, cliente0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(0, cliente1.getNAlugueres());
      assertTrue(boolean0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      System.setCurrentTimeMillis(11L);
      Cliente cliente1 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(0, cliente1.getNAlugueres());
      assertFalse(boolean0);
      assertEquals(0.0, cliente1.getNKm(), 0.01);
      assertEquals(0, cliente1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n");
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals((Object) null);
      assertEquals(0, cliente0.getNAlugueres());
      assertFalse(boolean0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente0);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      assertTrue(cliente1.equals((Object)cliente0));
      
      Coordinate coordinate0 = new Coordinate((-2114.52069), (-2080.88728));
      cliente0.setPosicao(coordinate0);
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(cliente1.equals((Object)cliente0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.hashCode();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      String string0 = cliente0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.getPosicao();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Cliente cliente0 = new Cliente("", "", "$Blx]>", "N\u00FAmero de alugueres efetuados: ", "", mockGregorianCalendar0, (Coordinate) null);
      // Undeclared exception!
      try { 
        cliente0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Cliente", e);
      }
  }
}

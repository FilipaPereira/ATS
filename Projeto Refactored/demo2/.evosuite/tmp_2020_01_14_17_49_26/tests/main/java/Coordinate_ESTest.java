/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 18:08:33 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.Coordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Coordinate_ESTest extends Coordinate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      Coordinate coordinate1 = new Coordinate((-1.0), 3.141592653589793);
      int int0 = coordinate0.compareTo(coordinate1);
      assertEquals((-1.0), coordinate1.getLatitude(), 0.01);
      assertEquals(0, int0);
      assertEquals(3.141592653589793, coordinate1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      double double0 = coordinate0.getLongitude();
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      double double0 = coordinate0.getLongitude();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2167.217554188378, 2167.217554188378);
      double double0 = coordinate0.getLatitude();
      assertEquals(2167.217554188378, coordinate0.getLongitude(), 0.01);
      assertEquals(2167.217554188378, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1882.995435641), 0.0);
      double double0 = coordinate0.getLatitude();
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-1882.995435641), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = new Coordinate(2189.0, (-1.0));
      double double0 = coordinate0.getDistancia(coordinate1);
      assertEquals(2188.999771585187, double0, 0.01);
      assertEquals((-1.0), coordinate1.getLongitude(), 0.01);
      assertEquals(2189.0, coordinate1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      assertEquals(2.0, coordinate0.getLongitude(), 0.01);
      
      coordinate0.setLongitude(0.0);
      coordinate0.clone();
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      Coordinate coordinate1 = coordinate0.clone();
      boolean boolean0 = coordinate0.equals(coordinate1);
      assertTrue(boolean0);
      assertEquals(2.0, coordinate1.getLongitude(), 0.01);
      assertEquals(0.0, coordinate1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      // Undeclared exception!
      try { 
        coordinate0.getDistancia((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      // Undeclared exception!
      try { 
        coordinate0.compareTo((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = null;
      try {
        coordinate0 = new Coordinate((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2.0, 2.0);
      double double0 = coordinate0.getLongitude();
      assertEquals(2.0, double0, 0.01);
      assertEquals(2.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      String string0 = coordinate0.getLatitudeAsString();
      assertEquals(2.0, coordinate0.getLongitude(), 0.01);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      assertEquals(0.0, coordinate1.getLatitude(), 0.01);
      assertTrue(coordinate1.equals((Object)coordinate0));
      assertEquals(2.0, coordinate1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      double double0 = coordinate0.getLatitude();
      assertEquals(2.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      String string0 = coordinate0.getLongitudeAsString();
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      Object object0 = new Object();
      boolean boolean0 = coordinate0.equals(object0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(2.0, coordinate0.getLongitude(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4.099376169), (-4.099376169));
      Coordinate coordinate1 = new Coordinate(0.0, (-4.099376169));
      int int0 = coordinate1.compareTo(coordinate0);
      assertEquals((-1), int0);
      assertEquals(0.0, coordinate1.getLatitude(), 0.01);
      assertEquals((-4.099376169), coordinate1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      int int0 = coordinate0.compareTo(coordinate0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, int0);
      assertEquals(2.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      // Undeclared exception!
      try { 
        coordinate0.setLongitude((-3566.28159459315));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter did not pass validation as defined by the CoordinateManager class
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      
      coordinate0.setLatitude(2.0);
      coordinate0.clone();
      assertEquals(2.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4.099376169), (-4.099376169));
      // Undeclared exception!
      try { 
        coordinate0.setLatitude(3533.985256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter did not pass validation as defined by the CoordinateManager class
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4.099376169), (-4.099376169));
      coordinate0.hashCode();
      assertEquals((-4.099376169), coordinate0.getLongitude(), 0.01);
      assertEquals((-4.099376169), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4.099376169), (-4.099376169));
      double double0 = coordinate0.getDistancia(coordinate0);
      assertEquals((-4.099376169), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-4.099376169), coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4.099376169), (-4.099376169));
      String string0 = coordinate0.toString();
      assertEquals("-4.099376, -4.099376", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4.099376169), (-4.099376169));
      Coordinate coordinate1 = coordinate0.clone();
      assertEquals((-4.099376169), coordinate1.getLatitude(), 0.01);
      assertEquals((-4.099376169), coordinate0.getLongitude(), 0.01);
      assertTrue(coordinate1.equals((Object)coordinate0));
  }
}

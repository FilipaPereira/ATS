/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 17:55:00 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import main.java.Aluguer;
import main.java.Coordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aluguer_ESTest extends Aluguer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getListaEspera());
      
      aluguer0.setEstadoClassificacao((-2013578700));
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertNotSame(aluguer0, aluguer1);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-2013578700), aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(boolean0);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-2013578700), aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoViagem());
      
      aluguer0.setTempoViagem(240);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertNotSame(aluguer0, aluguer1);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(240, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(boolean0);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(240, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoViagem());
      
      aluguer1.setTempoAteVeiculo((-1));
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals((-1), aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoViagem());
      
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(boolean0);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals((-1), aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      
      aluguer1.setCustoViagem(2074.17276);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(2074.17276, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(boolean0);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(2074.17276, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      aluguer0.setTempoViagem(1727);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(1727, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      int int0 = aluguer0.getTempoViagem();
      assertEquals(1727, int0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(1727, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      
      aluguer0.setTempoViagem((-3108));
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-3108), aluguer0.getTempoViagem());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      
      int int0 = aluguer0.getTempoViagem();
      assertEquals((-3108), int0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-3108), aluguer0.getTempoViagem());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      
      aluguer0.setTempoAteVeiculo(1);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(1, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      
      int int0 = aluguer0.getTempoAteVeiculo();
      assertEquals(1, int0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(1, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      
      aluguer0.setTempoAteVeiculo((-1));
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals((-1), aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      
      int int0 = aluguer0.getTempoAteVeiculo();
      assertEquals((-1), int0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals((-1), aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      
      aluguer0.setRealizado(true);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      boolean boolean0 = aluguer0.getRealizado();
      assertTrue(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("TS31KUJSAZ[Ij");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Aluguer aluguer0 = new Aluguer("##.######", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (Coordinate) null);
      assertNotNull(aluguer0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertNull(aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("##.######", aluguer0.getEmail());
      
      String string0 = aluguer0.getMatricula();
      assertNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertNull(aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("##.######", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-248), 2764, (-248), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-248), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-248.0), coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer(", ", ", ", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-248,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2764,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-248,HOUR_OF_DAY=-248,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-248.0), coordinate0.getLatitude(), 0.01);
      assertEquals(", ", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(", ", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      
      String string0 = aluguer0.getMatricula();
      assertNotNull(string0);
      assertEquals(", ", string0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-248,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2764,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-248,HOUR_OF_DAY=-248,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-248.0), coordinate0.getLatitude(), 0.01);
      assertEquals(", ", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(", ", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getMatricula());
      
      aluguer0.setListaEspera(true);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      
      boolean boolean0 = aluguer0.getListaEspera();
      assertTrue(boolean0);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      
      aluguer0.setEstadoClassificacao((-3108));
      assertEquals((-3108), aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals((-3108), int0);
      assertEquals((-3108), aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-943), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-943), 0.0);
      assertNotNull(coordinate0);
      assertEquals((-943.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-943,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-943.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertNull(aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNull(aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      
      String string0 = aluguer0.getEmail();
      assertNull(string0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-943,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-943.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertNull(aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertNull(aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 863, 863, 863, 3719, 0);
      assertNotNull(mockGregorianCalendar0);
      
      Aluguer aluguer0 = new Aluguer("&; yYHKCZ7a??E,D<x", "&; yYHKCZ7a??E,D<x", mockGregorianCalendar0, mockGregorianCalendar0, (Coordinate) null);
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=863,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=863,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=863,HOUR_OF_DAY=863,MINUTE=3719,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("&; yYHKCZ7a??E,D<x", aluguer0.getMatricula());
      assertEquals("&; yYHKCZ7a??E,D<x", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      
      String string0 = aluguer0.getEmail();
      assertNotNull(string0);
      assertEquals("&; yYHKCZ7a??E,D<x", string0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=863,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=863,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=863,HOUR_OF_DAY=863,MINUTE=3719,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("&; yYHKCZ7a??E,D<x", aluguer0.getMatricula());
      assertEquals("&; yYHKCZ7a??E,D<x", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      aluguer0.setDistancia(1.0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      double double0 = aluguer0.getDistancia();
      assertEquals(1.0, double0, 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      
      aluguer0.setDistancia((-3283.11198947361));
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-3283.11198947361), aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      
      double double0 = aluguer0.getDistancia();
      assertEquals((-3283.11198947361), double0, 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-3283.11198947361), aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2211, (-1), 653);
      assertNotNull(mockGregorianCalendar0);
      
      Aluguer aluguer0 = new Aluguer("iB>x;n8sh<!P_dSj", "iB>x;n8sh<!P_dSj", mockGregorianCalendar0, mockGregorianCalendar0, (Coordinate) null);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      
      Coordinate coordinate0 = aluguer0.getDestino();
      assertNull(coordinate0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2888.1);
      assertNotNull(coordinate0);
      assertEquals(2888.1, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("", "", (GregorianCalendar) null, (GregorianCalendar) null, coordinate0);
      assertNotNull(aluguer0);
      assertEquals(2888.1, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      
      Coordinate coordinate1 = aluguer0.getDestino();
      assertNotNull(coordinate1);
      assertSame(coordinate0, coordinate1);
      assertSame(coordinate1, coordinate0);
      assertEquals(2888.1, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, coordinate1.getLatitude(), 0.01);
      assertEquals(2888.1, coordinate1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(599.98245599864, 0.0);
      assertNotNull(coordinate0);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(599.98245599864, coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("K^MSc\"56W6", "", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(599.98245599864, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("K^MSc\"56W6", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      
      Coordinate coordinate1 = aluguer0.getDestino();
      assertNotNull(coordinate1);
      assertSame(coordinate0, coordinate1);
      assertSame(coordinate1, coordinate0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(599.98245599864, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("K^MSc\"56W6", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(599.98245599864, coordinate1.getLatitude(), 0.01);
      assertEquals(0.0, coordinate1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("%:Vf9rM<1~]", "%:Vf9rM<1~]", (GregorianCalendar) null, (GregorianCalendar) null, coordinate0);
      assertNotNull(aluguer0);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("%:Vf9rM<1~]", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("%:Vf9rM<1~]", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      Coordinate coordinate1 = aluguer0.getDestino();
      assertNotNull(coordinate1);
      assertSame(coordinate0, coordinate1);
      assertSame(coordinate1, coordinate0);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("%:Vf9rM<1~]", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("%:Vf9rM<1~]", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals((-1.0), coordinate1.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1044.1244), (-1044.1244));
      assertNotNull(coordinate0);
      assertEquals((-1044.1244), coordinate0.getLongitude(), 0.01);
      assertEquals((-1044.1244), coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer((String) null, "T|wN`HeV/", (GregorianCalendar) null, (GregorianCalendar) null, coordinate0);
      assertNotNull(aluguer0);
      assertEquals((-1044.1244), coordinate0.getLongitude(), 0.01);
      assertEquals((-1044.1244), coordinate0.getLatitude(), 0.01);
      assertEquals("T|wN`HeV/", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertNull(aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertNull(gregorianCalendar0);
      assertEquals((-1044.1244), coordinate0.getLongitude(), 0.01);
      assertEquals((-1044.1244), coordinate0.getLatitude(), 0.01);
      assertEquals("T|wN`HeV/", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertNull(aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2211, (-1), 653);
      assertNotNull(mockGregorianCalendar0);
      
      Aluguer aluguer0 = new Aluguer("iB>x;n8sh<!P_dSj", "iB>x;n8sh<!P_dSj", mockGregorianCalendar0, mockGregorianCalendar0, (Coordinate) null);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertFalse(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1617), (-1617), 2146448802);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(1654.0460448935414, (-1617));
      assertNotNull(coordinate0);
      assertEquals((-1617.0), coordinate0.getLongitude(), 0.01);
      assertEquals(1654.0460448935414, coordinate0.getLatitude(), 0.01);
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1617,MONTH=-1617,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2146448802,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Aluguer aluguer0 = new Aluguer("-180.0000", "Vua1a6D6", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1617,MONTH=-1617,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2146448802,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1617.0), coordinate0.getLongitude(), 0.01);
      assertEquals(1654.0460448935414, coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("Vua1a6D6", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("-180.0000", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1617,MONTH=-1617,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2146448802,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1617.0), coordinate0.getLongitude(), 0.01);
      assertEquals(1654.0460448935414, coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("Vua1a6D6", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("-180.0000", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=-1617,MONTH=-1617,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2146448802,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2983, 3433, 11);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(34.2745401, (-1621.293829636051));
      assertNotNull(coordinate0);
      assertEquals(34.2745401, coordinate0.getLatitude(), 0.01);
      assertEquals((-1621.293829636051), coordinate0.getLongitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("fz(2PE,ss{YL?9=t7", "@?C sw", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(34.2745401, coordinate0.getLatitude(), 0.01);
      assertEquals((-1621.293829636051), coordinate0.getLongitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("@?C sw", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("fz(2PE,ss{YL?9=t7", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-371));
      assertEquals((-371), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-371,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals((-371), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-371,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(34.2745401, coordinate0.getLatitude(), 0.01);
      assertEquals((-1621.293829636051), coordinate0.getLongitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("@?C sw", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("fz(2PE,ss{YL?9=t7", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-371,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals((-371), gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2004318071), (-1285), 1, (-1468), (-2004318071));
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-2378.17441855), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-2378.17441855), coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("UFP~(ON;cx8%QG&p", "UFP~(ON;cx8%QG&p", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-2378.17441855), coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getMatricula());
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-2378.17441855), coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getMatricula());
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      
      mockGregorianCalendar0.setFirstDayOfWeek((-3160));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-3160), mockGregorianCalendar0.getFirstDayOfWeek());
      
      Aluguer aluguer0 = new Aluguer("W3}3iZ~a7kN{,sA", "8)Z+C8q", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-3160), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("8)Z+C8q", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("W3}3iZ~a7kN{,sA", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-3160), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("8)Z+C8q", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("W3}3iZ~a7kN{,sA", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-3160), gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertNull(gregorianCalendar0);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("Q4yG}.aJX!", aluguer0.getMatricula());
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2211, (-1), 653);
      assertNotNull(mockGregorianCalendar0);
      
      Aluguer aluguer0 = new Aluguer("iB>x;n8sh<!P_dSj", "iB>x;n8sh<!P_dSj", mockGregorianCalendar0, mockGregorianCalendar0, (Coordinate) null);
      assertNotNull(aluguer0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals("iB>x;n8sh<!P_dSj", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2211,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=653,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2077, 0, 0, 1, 1);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(0, (-1313.6793099443));
      assertNotNull(coordinate0);
      assertEquals((-1313.6793099443), coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("~*L?[w$", "~*L?[w$", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2077,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1313.6793099443), coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("~*L?[w$", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("~*L?[w$", aluguer0.getMatricula());
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=2077,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=2077,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-1313.6793099443), coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("~*L?[w$", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("~*L?[w$", aluguer0.getMatricula());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=?,YEAR=2077,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals(0, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2983, 3433, 11);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(34.2745401, (-1621.293829636051));
      assertNotNull(coordinate0);
      assertEquals((-1621.293829636051), coordinate0.getLongitude(), 0.01);
      assertEquals(34.2745401, coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("fz(2PE,ss{YL?9=t7", "@?C sw", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1621.293829636051), coordinate0.getLongitude(), 0.01);
      assertEquals(34.2745401, coordinate0.getLatitude(), 0.01);
      assertEquals("fz(2PE,ss{YL?9=t7", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("@?C sw", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-371));
      assertEquals((-371), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-371,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals((-371), mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-371,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((-1621.293829636051), coordinate0.getLongitude(), 0.01);
      assertEquals(34.2745401, coordinate0.getLatitude(), 0.01);
      assertEquals("fz(2PE,ss{YL?9=t7", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("@?C sw", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals((-371), gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-371,ERA=?,YEAR=2983,MONTH=3433,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=11,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2004318071), (-1285), 1, (-1468), (-2004318071));
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-2378.17441855), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-2378.17441855), coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("UFP~(ON;cx8%QG&p", "UFP~(ON;cx8%QG&p", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-2378.17441855), coordinate0.getLatitude(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getMatricula());
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-2378.17441855), coordinate0.getLatitude(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getMatricula());
      assertEquals("UFP~(ON;cx8%QG&p", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2004318071,MONTH=-1285,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1468,HOUR_OF_DAY=-1468,MINUTE=-2004318071,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      
      mockGregorianCalendar0.setFirstDayOfWeek((-3160));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-3160), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Aluguer aluguer0 = new Aluguer("W3}3iZ~a7kN{,sA", "8)Z+C8q", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-3160), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals("W3}3iZ~a7kN{,sA", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("8)Z+C8q", aluguer0.getMatricula());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertNotNull(gregorianCalendar0);
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-3160), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals("W3}3iZ~a7kN{,sA", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("8)Z+C8q", aluguer0.getMatricula());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals((-3160), gregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-3160,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      
      aluguer0.setCustoViagem(2.0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(2.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals(2.0, double0, 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(2.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      aluguer0.setCustoViagem((-1330));
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals((-1330.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals((-1330.0), double0, 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals((-1330.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      aluguer0.setAlteraPreco(true);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertTrue(boolean0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      
      aluguer0.setAceite(true);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      
      boolean boolean0 = aluguer0.getAceite();
      assertTrue(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      
      aluguer0.setTempoViagem(1756);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(1756, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(1756, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(1756, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      aluguer0.setTempoViagem((-1));
      assertEquals((-1), aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals((-1), aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getRealizado());
      assertEquals((-1), aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      aluguer0.setTempoAteVeiculo(1981);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(1981, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(1981, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getMatricula());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(1981, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0, aluguer1.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      aluguer0.setTempoAteVeiculo((-1));
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals((-1), aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertEquals((-1), aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertEquals((-1), aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      
      aluguer0.setEstadoClassificacao(1);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(1, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(1, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(1, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getMatricula());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      aluguer0.setEstadoClassificacao((-2013578670));
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-2013578670), aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals((-2013578670), aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals((-2013578670), aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      aluguer0.setDistancia(2652.0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(2652.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(2652.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(2652.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getMatricula());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      aluguer0.setDistancia((-1.0));
      aluguer0.clone();
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setCustoViagem(2074.17276);
      aluguer0.clone();
      assertEquals(2074.17276, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setCustoViagem((-1330));
      aluguer0.clone();
      assertEquals((-1330.0), aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAlteraPreco());
      
      aluguer0.setAlteraPreco(true);
      aluguer0.clone();
      assertTrue(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 0);
      Coordinate coordinate0 = new Coordinate((-353.83), (-1.0));
      Aluguer aluguer0 = new Aluguer("", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      Aluguer aluguer1 = aluguer0.clone();
      // Undeclared exception!
      try { 
        aluguer0.equals(aluguer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Aluguer aluguer0 = null;
      try {
        aluguer0 = new Aluguer((Aluguer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Aluguer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getEmail();
      assertFalse(aluguer0.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getMatricula();
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      double double0 = aluguer0.getCustoViagem();
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      int int0 = aluguer0.getTempoViagem();
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, int0);
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("F=iE@|yC:`>fh YoR", "Q4yG}.aJX!", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals("F=iE@|yC:`>fh YoR", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, int0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getListaEspera();
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      double double0 = aluguer0.getDistancia();
      assertEquals(0.0, double0, 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getAceite();
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.getRealizado();
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(boolean0);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      int int0 = aluguer0.getTempoAteVeiculo();
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, int0);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setEstadoClassificacao(1838);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertEquals(1838, aluguer1.getEstadoClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer0.setAlteraPreco(true);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertFalse(boolean0);
      assertTrue(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setRealizado(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer1.getRealizado());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setListaEspera(true);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertFalse(boolean0);
      assertTrue(aluguer1.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setTempoViagem(2256);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertEquals(2256, aluguer0.getTempoViagem());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer();
      aluguer1.setTempoAteVeiculo(240);
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertEquals(240, aluguer1.getTempoAteVeiculo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      System.setCurrentTimeMillis((-18L));
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      MockDate mockDate0 = new MockDate((-18L));
      gregorianCalendar0.setTime(mockDate0);
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(boolean0);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      System.setCurrentTimeMillis(0L);
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(boolean0);
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("C-0", "C-0", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      Aluguer aluguer1 = new Aluguer("C-0", "L50", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      assertEquals("L50", aluguer1.getMatricula());
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertTrue(aluguer1.getListaEspera());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("C-0", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer(" ", " ", (GregorianCalendar) null, (GregorianCalendar) null, (Coordinate) null);
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(boolean0);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Object object0 = new Object();
      boolean boolean0 = aluguer0.equals(object0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer0);
      assertTrue(boolean0);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setAceite(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer1.getAceite());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(547);
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals(547, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      assertFalse(aluguer0.getRealizado());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getRealizado());
      
      aluguer0.setRealizado(true);
      aluguer0.clone();
      assertTrue(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.hashCode();
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertFalse(aluguer0.getAceite());
      
      aluguer0.setAceite(true);
      aluguer0.clone();
      assertTrue(aluguer0.getAceite());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setCustoViagem((-3410));
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertEquals((-3410.0), aluguer1.getCustoViagem(), 0.01);
      assertFalse(boolean0);
  }
}

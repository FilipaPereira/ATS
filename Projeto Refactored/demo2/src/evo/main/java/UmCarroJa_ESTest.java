/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 18:07:20 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import main.java.Aluguer;
import main.java.Cliente;
import main.java.Coordinate;
import main.java.ParDatas;
import main.java.UmCarroJa;
import main.java.Utilizador;
import main.java.Veiculo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UmCarroJa_ESTest extends UmCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2);
      Cliente cliente0 = new Cliente("_(", "_(", "_(", "Q,uQ4hoq@$Q+AMC^*k", "\n", (GregorianCalendar) null, coordinate0);
      cliente0.setNAlugueres((-2028178999));
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.classificarClienteJa("_(", 2);
      assertEquals(0, umCarroJa0.getNVeiculos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-275.7), 1.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.maisBaratoNoPerimetro(coordinate1, coordinate0, parDatas0, 1.0, 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setClassificacao(640);
      umCarroJa0.registarVeiculo(veiculo0);
      Aluguer aluguer0 = new Aluguer();
      umCarroJa0.classificarVeiculo(aluguer0, (-1143));
      assertEquals(2, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      Aluguer aluguer0 = new Aluguer();
      umCarroJa0.classificarCliente(aluguer0, 626);
      assertEquals(1, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao(20);
      umCarroJa0.registarUtilizador(cliente0);
      Aluguer aluguer0 = new Aluguer();
      umCarroJa0.classificarCliente(aluguer0, (-70));
      assertEquals(1, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.guardarEstado("d", (GregorianCalendar) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      int int0 = umCarroJa0.getNVeiculos();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      int int0 = umCarroJa0.getNUsers();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Locale locale0 = Locale.forLanguageTag("XqU.cod9|wBM lp@'K!");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        umCarroJa0.totalFactBDates("XqU.cod9|wBM lp@'K!", mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2);
      Cliente cliente0 = new Cliente("_(", "_(", "_(", "Q,uQ4hoq@$Q+AMC^*k", "\n", (GregorianCalendar) null, coordinate0);
      umCarroJa0.registarUtilizador(cliente0);
      // Undeclared exception!
      try { 
        umCarroJa0.toStringUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.respostaProp(true, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarVeiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.registaAluguer(aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.guardarEstado((String) null, (GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      GregorianCalendar gregorianCalendar0 = umCarroJa0.getDataInicioApp();
      try { 
        umCarroJa0.guardarEstado("", gregorianCalendar0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getUserNIF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getEmailUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculoJa("\n", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      TimeZone timeZone0 = TimeZone.getTimeZone("Jwh{EF;fN");
      Locale locale0 = new Locale("gM'__@PWZ", "+'ijM_pr%6", "gM'__@PWZ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Coordinate coordinate0 = new Coordinate((-2678.1907126), (-2678.1907126));
      Aluguer aluguer0 = new Aluguer("Jwh{EF;fN", "Jwh{EF;fN", mockGregorianCalendar0, mockGregorianCalendar0, coordinate0);
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculo(aluguer0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, (-197));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.getAlugueresProp((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getUtilizador("nL#Y9UQ'k8CH9+\";");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // nL#Y9UQ'k8CH9+\";
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getUserNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      String string0 = umCarroJa0.toStringVeiculo();
      assertEquals("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringVeiculo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      String string0 = umCarroJa0.toStringUser();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringAlugs();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNAlugs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      umCarroJa0.classificarVeiculoJa("", 1694);
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2);
      Cliente cliente0 = new Cliente("_(", "_(", "_(", "Q,uQ4hoq@$Q+AMC^*k", "", (GregorianCalendar) null, coordinate0);
      cliente0.setNAlugueres(2);
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.classificarClienteJa("_(", 2);
      assertEquals("", umCarroJa0.getUserNIF());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      GregorianCalendar gregorianCalendar0 = umCarroJa0.getDataInicioApp();
      ParDatas parDatas0 = new ParDatas(gregorianCalendar0, gregorianCalendar0);
      try { 
        umCarroJa0.maisPertoJa(coordinate0, parDatas0, "Aluguer Aceite pelo Propriet\u00E1rio: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresCliente((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o efetuou nenhum aluguer.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-1695), (-1695));
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.determinadaAutonomia(coordinate0, parDatas0, (-1695), 0, (-1695));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 640, 1, 1, 3);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.veiculoEspecifico(coordinate0, parDatas0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2019);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2019, 2019, (-14));
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.maisProximo(coordinate0, parDatas0, (-14));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setDisponibilidade(true);
      umCarroJa0.registarVeiculo(veiculo0);
      Coordinate coordinate0 = new Coordinate(70.0, 70.0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisBaratoJa(coordinate0, parDatas0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-1.0), (-1));
      Veiculo veiculo0 = new Veiculo("main.java.NaoEfetuouNenhumAluguerException", "main.java.NaoEfetuouNenhumAluguerException", "main.java.NaoEfetuouNenhumAluguerException", (-1), (-1), (-1.0), (-1), coordinate0, true);
      umCarroJa0.registarVeiculo(veiculo0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisBarato(coordinate0, parDatas0, 160);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.alugueresEfetuados();
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.alugueresClassificarVeiculo();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        umCarroJa0.determinarListaAlugCli("G", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.determinarListaAlugCli("N1", "\"3Z0>{%43zs");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // \"3Z0>{%43zs
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-1.0), (-1));
      Veiculo veiculo0 = new Veiculo("main.java.NaoEfetuouNenhumAluguerException", "main.java.NaoEfetuouNenhumAluguerException", "main.java.NaoEfetuouNenhumAluguerException", (-1), (-1), (-1.0), (-1), coordinate0, true);
      umCarroJa0.registarVeiculo(veiculo0);
      try { 
        umCarroJa0.altPrecoKm("main.java.NaoEfetuouNenhumAluguerException", 1055.1183551150714);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // main.java.NaoEfetuouNenhumAluguerException
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      umCarroJa0.altPrecoKm("", 0.0);
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.altPrecoKm("nL#Y9UQ'k8CH9+\";", 1000.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // nL#Y9UQ'k8CH9+\";
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.abastecerVeiculo("bN,4J", (-70));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // bN,4J
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      umCarroJa0.sinalizarDisponibilidade("", false);
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.sinalizarDisponibilidade((String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-1.0), (-1));
      Veiculo veiculo0 = new Veiculo("main.java.NaoEfetuouNenhumAluguerException", "main.java.NaoEfetuouNenhumAluguerException", "main.java.NaoEfetuouNenhumAluguerException", (-1), (-1), (-1.0), (-1), coordinate0, true);
      umCarroJa0.registarVeiculo(veiculo0);
      try { 
        umCarroJa0.registarVeiculo(veiculo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // main.java.NaoEfetuouNenhumAluguerException
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeVeiculo("main.java.ComparadorNAluguer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesAlugueres();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      List<Cliente> list0 = umCarroJa0.get10ClientesAlugueres();
      assertTrue(list0.contains(cliente0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesKm();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      List<Cliente> list0 = umCarroJa0.get10ClientesKm();
      assertTrue(list0.contains(cliente0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresVeiculo("Data de fim: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Data de fim: 
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeUtilizador("Xf=k`vIldNJe B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      try { 
        umCarroJa0.iniciarSessao("", "8)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 8)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.iniciarSessao("", "");
      assertEquals(0, umCarroJa0.getNVeiculos());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.iniciarSessao((String) null, "[~^F,GG<,+8|C,(%9c");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.registarUtilizador(utilizador0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2);
      Cliente cliente0 = new Cliente("_(", "_(", "_(", "Q,uQ4hoq@$Q+AMC^*k", "\n", (GregorianCalendar) null, coordinate0);
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.classificarClienteJa("_(", 2);
      assertEquals(1, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.classificarClienteJa("oWmtS[q=bJhaOWJ50L", 1178);
      assertEquals(0, umCarroJa0.getNVeiculos());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.determinarListaEspera("Marca: ");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosCliente("", coordinate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // main.java.Utilizador cannot be cast to main.java.Cliente
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3164), (-3164), (-3164));
      umCarroJa0.setDataInicioApp(mockGregorianCalendar0);
      assertEquals(0, umCarroJa0.getNUsers());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getEmailUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNVeiculos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosAutonomiaVeiculo("", (Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNUsers();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.altPrecoAluguer(0.0, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.UmCarroJa", e);
      }
  }
}

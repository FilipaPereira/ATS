/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 18:03:43 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import main.java.Utilizador;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Utilizador utilizador0 = new Utilizador((String) null, "NIF: ", "NIF: ", (String) null, "NIF: ", mockGregorianCalendar0);
      utilizador0.getPassword();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("W+^~&I,v^'xWml$96");
      utilizador0.getPassword();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome((String) null);
      utilizador0.getNome();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\n");
      utilizador0.getNome();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNIF((String) null);
      utilizador0.getNIF();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNIF("*****    UTILIZADOR    *****\n");
      utilizador0.getNIF();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      utilizador0.getMorada();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (String) null, "G'Kv2]^:`", mockGregorianCalendar0);
      utilizador0.getMorada();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail((String) null);
      utilizador0.getEmail();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("=zD%.^pJb2\"hm<2");
      utilizador0.getEmail();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "", "Data de Nascimento: ", (String) null, (GregorianCalendar) null);
      utilizador0.getDataNasc();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4350, 4350, (-2126221409), 1521, 175);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (String) null, (String) null, mockGregorianCalendar0);
      mockGregorianCalendar0.setLenient(false);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Utilizador utilizador0 = new Utilizador((String) null, "NIF: ", "NIF: ", (String) null, "NIF: ", mockGregorianCalendar0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1508));
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertEquals((-1508), gregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(872, 872, 872, 872, 872, 3150);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      utilizador0.setDataNasc(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertEquals(0, gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setFirstDayOfWeek((-1431655763));
      Utilizador utilizador0 = new Utilizador("", "", "6Nj9}1U4k^y'C?5-", "6Nj9}1U4k^y'C?5-", "", mockGregorianCalendar0);
      utilizador0.getDataNasc();
      assertEquals("6Nj9}1U4k^y'C?5-", utilizador0.getEmail());
      assertEquals("", utilizador0.getNIF());
      assertEquals("6Nj9}1U4k^y'C?5-", utilizador0.getPassword());
      assertEquals("", utilizador0.getMorada());
      assertEquals("", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("$25ohMlE=", " (}\"`^wq<r:k'v,", " (}\"`^wq<r:k'v,", " (}\"`^wq<r:k'v,", " (}\"`^wq<r:k'v,", (GregorianCalendar) null);
      // Undeclared exception!
      try { 
        utilizador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4350, 4350, (-2126221431), 1521, 175);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (String) null, (String) null, mockGregorianCalendar0);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        utilizador0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador1.equals(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getMorada();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setMorada("6^R");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setPassword("T:?LJ/\"M+");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setEmail("\n");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setNIF("G");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setNome("W");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      boolean boolean0 = utilizador0.equals(gregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4350, 4350, 4350, 4350, 4350);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, (String) null, (String) null, mockGregorianCalendar0);
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1534, "Password: ");
      Locale locale0 = Locale.forLanguageTag("Password: ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      utilizador1.setDataNasc(mockGregorianCalendar0);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\n", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.hashCode();
  }
}

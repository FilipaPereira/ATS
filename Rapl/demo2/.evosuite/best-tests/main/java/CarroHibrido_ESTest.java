/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 18:09:47 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.CarroHibrido;
import main.java.Coordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CarroHibrido_ESTest extends CarroHibrido_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(coordinate0).toString();
      CarroHibrido carroHibrido0 = new CarroHibrido("R-GU(R{+j`=", "***** Carro H\u00EDbrido *****\n", "***** Carro H\u00EDbrido *****\n", 279, 279, 279, (-2866), coordinate0, true);
      CarroHibrido carroHibrido1 = carroHibrido0.clone();
      assertEquals((-2866), carroHibrido1.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(coordinate0).toString();
      CarroHibrido carroHibrido0 = new CarroHibrido("##.######", "##.######", "##.######", (-552), (-552), (-552), 1134, coordinate0, false);
      CarroHibrido carroHibrido1 = carroHibrido0.clone();
      assertNotSame(carroHibrido0, carroHibrido1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(coordinate0).toString();
      CarroHibrido carroHibrido0 = new CarroHibrido("", "", "", 3088, 3088, 3088, 0, coordinate0, false);
      carroHibrido0.setClassificacao(3088);
      CarroHibrido carroHibrido1 = carroHibrido0.clone();
      assertEquals(3088, carroHibrido1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      carroHibrido0.setClassificacao((-1));
      CarroHibrido carroHibrido1 = carroHibrido0.clone();
      assertNotSame(carroHibrido0, carroHibrido1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido("+%r[|#", "+%r[|#", "+%r[|#", 1726, (-834.963), 0.0, (-1), (Coordinate) null, false);
      // Undeclared exception!
      try { 
        carroHibrido0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      CarroHibrido carroHibrido0 = new CarroHibrido((String) null, (String) null, "VT`tbY#xKy~UDJR", 3449, 1874.0, 3449, 3449, coordinate0, true);
      CarroHibrido carroHibrido1 = new CarroHibrido(carroHibrido0);
      // Undeclared exception!
      try { 
        carroHibrido0.equals(carroHibrido1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CarroHibrido carroHibrido0 = null;
      try {
        carroHibrido0 = new CarroHibrido((CarroHibrido) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      CarroHibrido carroHibrido0 = new CarroHibrido("", "", "", 3088, 3088, 3088, 0, coordinate0, false);
      CarroHibrido carroHibrido1 = new CarroHibrido(carroHibrido0);
      boolean boolean0 = carroHibrido0.equals(carroHibrido1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      boolean boolean0 = carroHibrido0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      CarroHibrido carroHibrido0 = new CarroHibrido("", "", "", 3088, 3088, 3088, 0, coordinate0, false);
      boolean boolean0 = carroHibrido0.equals(carroHibrido0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(coordinate0).toString();
      CarroHibrido carroHibrido0 = new CarroHibrido("", "", "", 3088, 3088, 3088, 0, coordinate0, false);
      String string0 = carroHibrido0.toString();
      assertEquals("***** Carro H\u00EDbrido *****\n*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 3088\nPre\u00E7o Base por Km: 3088.0\nConsumo: 3088.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): null\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = mock(Coordinate.class, new ViolatedAssumptionAnswer());
      CarroHibrido carroHibrido0 = new CarroHibrido("", "", "", 3088, 3088, 3088, 0, coordinate0, false);
      boolean boolean0 = carroHibrido0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CarroHibrido carroHibrido0 = new CarroHibrido();
      carroHibrido0.hashCode();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 18:01:50 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.Locale;
import main.java.ParDatas;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParDatas_ESTest extends ParDatas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas((GregorianCalendar) null, (GregorianCalendar) null);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataInicio();
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1972), 738, 738, (-1972), 738, 738);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setLenient(false);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataInicio();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1972,MONTH=738,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=738,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1972,HOUR_OF_DAY=-1972,MINUTE=738,SECOND=738,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2031), (-2031), (-979), 1423, 0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataInicio();
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(943, (-2492), 943, 0, (-1));
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2492));
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataInicio();
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataInicio();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2561), (-2561), (-2561), 1, 1);
      mockGregorianCalendar0.setFirstDayOfWeek((-2561));
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataInicio();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-2561,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2561,MONTH=-2561,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2561,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      parDatas0.setDataFim((GregorianCalendar) null);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataFim();
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1972), 738, 738, (-1972), 738, 738);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setLenient(false);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataFim();
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataFim();
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(943, (-2492), 943, 0, (-1));
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2492));
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataFim();
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataFim();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      mockGregorianCalendar0.setFirstDayOfWeek((-1151));
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = parDatas0.getDataFim();
      assertEquals((-1151), gregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      ParDatas parDatas1 = new ParDatas(parDatas0);
      parDatas0.setDataFim((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        parDatas0.equals(parDatas1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.ParDatas", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParDatas parDatas0 = null;
      try {
        parDatas0 = new ParDatas((ParDatas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.ParDatas", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1937), (-1937), (-1937), (-1937), (-1937));
      parDatas0.setDataInicio(mockGregorianCalendar0);
      ParDatas parDatas1 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = parDatas1.equals(parDatas0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      ParDatas parDatas1 = new ParDatas(parDatas0);
      assertTrue(parDatas1.equals((Object)parDatas0));
      
      parDatas0.setDataInicio((GregorianCalendar) null);
      boolean boolean0 = parDatas1.equals(parDatas0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      ParDatas parDatas1 = new ParDatas(parDatas0);
      boolean boolean0 = parDatas0.equals(parDatas1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      boolean boolean0 = parDatas0.equals(parDatas0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      boolean boolean0 = parDatas0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      ParDatas parDatas1 = new ParDatas();
      parDatas1.setDataInicio(mockGregorianCalendar0);
      boolean boolean0 = parDatas0.isAvailable(parDatas1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      ParDatas parDatas1 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      boolean boolean0 = parDatas0.isAvailable(parDatas1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.of(1, 1, 1, 1, 0, 0, 0, (ZoneId) zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      parDatas0.setDataInicio(gregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1, 1);
      ParDatas parDatas1 = new ParDatas();
      parDatas1.setDataInicio(mockGregorianCalendar0);
      boolean boolean0 = parDatas0.isAvailable(parDatas1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      ParDatas parDatas1 = new ParDatas();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2826, 2826, 2826, 2826, 2826);
      parDatas1.setDataFim(mockGregorianCalendar0);
      parDatas0.setDataInicio(mockGregorianCalendar0);
      boolean boolean0 = parDatas0.isAvailable(parDatas1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      ParDatas parDatas1 = new ParDatas();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2826, 2826, 2826, 2826, 2826);
      parDatas0.setDataInicio(mockGregorianCalendar0);
      boolean boolean0 = parDatas0.isAvailable(parDatas1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      String string0 = parDatas0.toString();
      boolean boolean0 = parDatas0.equals(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      parDatas0.setDataInicio((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        parDatas0.isAvailable(parDatas0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.ParDatas", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas();
      parDatas0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParDatas parDatas0 = new ParDatas((GregorianCalendar) null, (GregorianCalendar) null);
      ParDatas parDatas1 = parDatas0.clone();
      assertNotSame(parDatas0, parDatas1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 14 17:57:43 GMT 2020
 */

package main.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import main.java.Coordinate;
import main.java.ParDatas;
import main.java.Veiculo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Veiculo_ESTest extends Veiculo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setClassificacao((-1942));
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals((-1942), veiculo1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setAutonomia(1749);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals(1749, veiculo0.getAutonomia());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setConsumo((-17.0));
      Veiculo veiculo1 = new Veiculo();
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals((-17.0), veiculo0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setPreco(0.4);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(0.4, veiculo1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setVelocidade(1882);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals(1882, veiculo0.getVelocidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime0 = MockInstant.atZone(instant0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      veiculo0.addDatas(mockGregorianCalendar0, gregorianCalendar0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia(0, 0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3648.0), 0);
      Veiculo veiculo0 = new Veiculo("main.java.Veiculo", "Data de fim: ", "main.java.Veiculo", 0, 0, 0, 0, coordinate0, false);
      boolean boolean0 = veiculo0.verificaAutonomia(0, (-267));
      assertEquals("main.java.Veiculo", veiculo0.getNIF());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("Data de fim: ", veiculo0.getMatricula());
      assertEquals("main.java.Veiculo", veiculo0.getMarca());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1212, 0.0);
      Veiculo veiculo0 = new Veiculo("L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", 1212, 1212, 990.36062, (-203), coordinate0, true);
      veiculo0.abastecerVeiculo(0.0);
      assertEquals((-203), veiculo0.getAutonomia());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(990.36062, veiculo0.getConsumo(), 0.01);
      assertEquals(1212.0, veiculo0.getPreco(), 0.01);
      assertEquals(1212, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3546.33435045), 0.0);
      Veiculo veiculo0 = new Veiculo("RM='Lp?7M71NK'5P.", "RM='Lp?7M71NK'5P.", "z6:YB2j)w&qOtG3", 1, 700.18, 700.18, 2028, coordinate0, false);
      String string0 = veiculo0.toString();
      assertEquals("*****    VE\u00CDCULO    *****\nMarca: RM='Lp?7M71NK'5P.\nMatr\u00EDcula: RM='Lp?7M71NK'5P.\nNIF do Propriet\u00E1rio: z6:YB2j)w&qOtG3\nVelocidade M\u00E9dia: 1\nPre\u00E7o Base por Km: 700.18\nConsumo: 700.18\nAutonomia: 2028\nPosi\u00E7\u00E3o (latitude e longitude): -3546.33435, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(4815.564, (-115.4723742857));
      int int0 = veiculo0.tempoViagemCarroJa(coordinate0);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(288851, int0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate((-1.911823002E9), 1071.0);
      int int0 = veiculo0.tempoViagemCarroJa(coordinate0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-1254736872), int0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1126), (-1126));
      Veiculo veiculo0 = new Veiculo("", "", "Lt@`u_'#<ot1Z8-v;", (-85), (-85), (-85), (-1126), coordinate0, false);
      veiculo0.tempoViagemCarro(coordinate0);
      assertEquals((-85.0), veiculo0.getConsumo(), 0.01);
      assertEquals((-85.0), veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals((-1126), veiculo0.getAutonomia());
      assertEquals("Lt@`u_'#<ot1Z8-v;", veiculo0.getNIF());
      assertEquals("", veiculo0.getMarca());
      assertEquals((-85), veiculo0.getVelocidade());
      assertEquals("", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(1.0, 0.0);
      int int0 = veiculo0.tempoAteVeiculoPeJa(coordinate0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(15, int0);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate((-1.911823002E9), 100.0);
      int int0 = veiculo0.tempoAteVeiculoPeJa(coordinate0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-1387426042), int0);
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Veiculo veiculo0 = new Veiculo("Xqvzy&Ao\u0003%\"}M", "=PPjSl;5p-{r", "Xqvzy&Ao\u0003%\"}M", 0, 0.0, 1314.73671211, 0, coordinate0, true);
      int int0 = veiculo0.getVelocidade();
      assertEquals(1314.73671211, veiculo0.getConsumo(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("=PPjSl;5p-{r", veiculo0.getMatricula());
      assertEquals("Xqvzy&Ao\u0003%\"}M", veiculo0.getNIF());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("Xqvzy&Ao\u0003%\"}M", veiculo0.getMarca());
      assertEquals(0, int0);
      assertEquals(0, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-6589), (-1.0));
      Veiculo veiculo0 = new Veiculo("]2^:t;?[ul?t}{aAM='", "Classifica\u00E7\u00E3o: ", "Classifica\u00E7\u00E3o: ", (-456), (-1.0), (-456), (-6589), coordinate0, true);
      int int0 = veiculo0.getVelocidade();
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-456), int0);
      assertEquals((-6589), veiculo0.getAutonomia());
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getMatricula());
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getNIF());
      assertEquals((-456.0), veiculo0.getConsumo(), 0.01);
      assertEquals((-1.0), veiculo0.getPreco(), 0.01);
      assertEquals("]2^:t;?[ul?t}{aAM='", veiculo0.getMarca());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(705, (-766.1625));
      Veiculo veiculo0 = new Veiculo("j#?0ax][}cbt5{W2!7", "j#?0ax][}cbt5{W2!7", (String) null, 705, 0.0, (-1520.429704486), 705, coordinate0, false);
      double double0 = veiculo0.getPreco();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1520.429704486), veiculo0.getConsumo(), 0.01);
      assertEquals(705, veiculo0.getVelocidade());
      assertEquals(705, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-323.27197316267086), (-1.0));
      Veiculo veiculo0 = new Veiculo(":EpAA", "7Lvy@,!MIjtDLuk", "", 3388, 3388, 3388, 0, coordinate0, false);
      double double0 = veiculo0.getPreco();
      assertEquals(3388.0, veiculo0.getConsumo(), 0.01);
      assertEquals("", veiculo0.getNIF());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(3388, veiculo0.getVelocidade());
      assertEquals(":EpAA", veiculo0.getMarca());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(3388.0, double0, 0.01);
      assertEquals("7Lvy@,!MIjtDLuk", veiculo0.getMatricula());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo("pIYS", "Classifica\u00E7\u00E3o: ", "pIYS", (-1598), (-1598), 70.0, 760, (Coordinate) null, false);
      veiculo0.getPosicao();
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getMatricula());
      assertEquals((-1598.0), veiculo0.getPreco(), 0.01);
      assertEquals(760, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("pIYS", veiculo0.getMarca());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals((-1598), veiculo0.getVelocidade());
      assertEquals("pIYS", veiculo0.getNIF());
      assertEquals(70.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-667.5673826037607), (-1964.19));
      Veiculo veiculo0 = new Veiculo("4-> gp&;.4k<g-P-}", "4-> gp&;.4k<g-P-}", "", (-2942), (-2942), (-1964.19), (-2942), coordinate0, true);
      veiculo0.getPosicao();
      assertEquals((-1964.19), veiculo0.getConsumo(), 0.01);
      assertEquals("4-> gp&;.4k<g-P-}", veiculo0.getMarca());
      assertEquals("4-> gp&;.4k<g-P-}", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("", veiculo0.getNIF());
      assertEquals((-2942.0), veiculo0.getPreco(), 0.01);
      assertEquals((-2942), veiculo0.getAutonomia());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals((-2942), veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = veiculo0.getPosicao();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(894.907, 0.0);
      Veiculo veiculo0 = new Veiculo("[&j=)*dfU`@%.r@z?y", "[&j=)*dfU`@%.r@z?y", "[&j=)*dfU`@%.r@z?y", 1422, 1422, 894.907, 1422, coordinate0, false);
      veiculo0.getPosicao();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(894.907, veiculo0.getConsumo(), 0.01);
      assertEquals(1422, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(1422.0, veiculo0.getPreco(), 0.01);
      assertEquals(1422, veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(705, (-766.1625));
      Veiculo veiculo0 = new Veiculo("j#?0ax][}cbt5{W2!7", "j#?0ax][}cbt5{W2!7", (String) null, 705, 0.0, (-1520.429704486), 705, coordinate0, false);
      String string0 = veiculo0.getNIF();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-1520.429704486), veiculo0.getConsumo(), 0.01);
      assertNull(string0);
      assertEquals(705, veiculo0.getAutonomia());
      assertEquals(705, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1126), (-1126));
      Veiculo veiculo0 = new Veiculo("", "", "Lt@`u_'#<ot1Z8-v;", (-85), (-85), (-85), (-1126), coordinate0, false);
      String string0 = veiculo0.getNIF();
      assertEquals((-85.0), veiculo0.getPreco(), 0.01);
      assertEquals((-1126), veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("Lt@`u_'#<ot1Z8-v;", string0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-85), veiculo0.getVelocidade());
      assertEquals("", veiculo0.getMatricula());
      assertEquals("", veiculo0.getMarca());
      assertEquals((-85.0), veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(105, 0.0);
      Veiculo veiculo0 = new Veiculo("The parameter did not pass validation as defined by the CoordinateManager class", (String) null, (String) null, 105, 0.0, 105, 105, coordinate0, false);
      String string0 = veiculo0.getMatricula();
      assertEquals(105, veiculo0.getAutonomia());
      assertNull(string0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(105.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(105, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getMatricula();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1212, 0.0);
      Veiculo veiculo0 = new Veiculo("L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", 1212, 1212, 990.36062, (-203), coordinate0, true);
      veiculo0.setMarca((String) null);
      veiculo0.getMarca();
      assertEquals(1212, veiculo0.getVelocidade());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(990.36062, veiculo0.getConsumo(), 0.01);
      assertEquals((-203), veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(1212.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getMarca();
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1212, 0.0);
      Veiculo veiculo0 = new Veiculo("L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", 1212, 1212, 990.36062, (-203), coordinate0, true);
      boolean boolean0 = veiculo0.getDisponibilidade();
      assertEquals(1212.0, veiculo0.getPreco(), 0.01);
      assertEquals(1212, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-203), veiculo0.getAutonomia());
      assertTrue(boolean0);
      assertEquals(990.36062, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-6589), (-1.0));
      Veiculo veiculo0 = new Veiculo("]2^:t;?[ul?t}{aAM='", "Classifica\u00E7\u00E3o: ", "Classifica\u00E7\u00E3o: ", (-456), (-1.0), (-456), (-6589), coordinate0, true);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      ParDatas parDatas0 = new ParDatas();
      linkedList0.add(parDatas0);
      veiculo0.setDatasAlugueres(linkedList0);
      veiculo0.getDatasAlugueres();
      assertEquals((-1.0), veiculo0.getPreco(), 0.01);
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getNIF());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("]2^:t;?[ul?t}{aAM='", veiculo0.getMarca());
      assertEquals((-456), veiculo0.getVelocidade());
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getMatricula());
      assertEquals((-456.0), veiculo0.getConsumo(), 0.01);
      assertEquals((-6589), veiculo0.getAutonomia());
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 86.98199834);
      Veiculo veiculo0 = new Veiculo("", "\n", "l+8.(JY=?", (-1723), 2.0, 0.0, 466, coordinate0, true);
      double double0 = veiculo0.getConsumo();
      assertEquals("", veiculo0.getMarca());
      assertEquals(466, veiculo0.getAutonomia());
      assertEquals(2.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("l+8.(JY=?", veiculo0.getNIF());
      assertEquals("\n", veiculo0.getMatricula());
      assertEquals((-1723), veiculo0.getVelocidade());
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Veiculo veiculo0 = new Veiculo("Xqvzy&Ao\u0003%\"}M", "=PPjSl;5p-{r", "Xqvzy&Ao\u0003%\"}M", 0, 0.0, 1314.73671211, 0, coordinate0, true);
      double double0 = veiculo0.getConsumo();
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("Xqvzy&Ao\u0003%\"}M", veiculo0.getMarca());
      assertEquals(1314.73671211, double0, 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("=PPjSl;5p-{r", veiculo0.getMatricula());
      assertEquals("Xqvzy&Ao\u0003%\"}M", veiculo0.getNIF());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setClassificacao(1882);
      int int0 = veiculo0.getClassificacao();
      assertEquals(1882, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(60.0, (-1032.3657455992857));
      Veiculo veiculo0 = new Veiculo("MH~F {zZwX-OyD2l", "G 3kjUk/-g${q", "MH~F {zZwX-OyD2l", (-2075), (-2075), 0.0, (-2075), coordinate0, false);
      veiculo0.setClassificacao((-1));
      int int0 = veiculo0.getClassificacao();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      int int0 = veiculo0.getAutonomia();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, int0);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(70.0, 0.0);
      Veiculo veiculo0 = new Veiculo(", ", ", ", "", 1, 70.0, 1, 1, coordinate0, false);
      int int0 = veiculo0.getAutonomia();
      assertEquals(1.0, veiculo0.getConsumo(), 0.01);
      assertEquals(", ", veiculo0.getMarca());
      assertEquals(1, veiculo0.getVelocidade());
      assertEquals(", ", veiculo0.getMatricula());
      assertEquals(70.0, veiculo0.getPreco(), 0.01);
      assertEquals(1, int0);
      assertEquals("", veiculo0.getNIF());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1126), (-1126));
      Veiculo veiculo0 = new Veiculo("", "", "Lt@`u_'#<ot1Z8-v;", (-85), (-85), (-85), (-1126), coordinate0, false);
      double double0 = veiculo0.custoViagem((-1126));
      assertEquals((-1126), veiculo0.getAutonomia());
      assertEquals("Lt@`u_'#<ot1Z8-v;", veiculo0.getNIF());
      assertEquals((-85.0), veiculo0.getConsumo(), 0.01);
      assertEquals(95710.0, double0, 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("", veiculo0.getMarca());
      assertEquals("", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-85), veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-561.082), 2.0);
      Veiculo veiculo0 = new Veiculo("Data de fim: ", "O+[5:D\"Vqe", "O+[5:D\"Vqe", 0, 2.0, 1679.5683263205, (-838), coordinate0, true);
      double double0 = veiculo0.custoViagem((-1705.629809360653));
      assertEquals(1679.5683263205, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals((-838), veiculo0.getAutonomia());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals("O+[5:D\"Vqe", veiculo0.getMatricula());
      assertEquals("Data de fim: ", veiculo0.getMarca());
      assertEquals("O+[5:D\"Vqe", veiculo0.getNIF());
      assertEquals((-3411.259618721306), double0, 0.01);
      assertEquals(0, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3546.33435045), 0.0);
      Veiculo veiculo0 = new Veiculo("RM='Lp?7M71NK'5P.", "RM='Lp?7M71NK'5P.", "z6:YB2j)w&qOtG3", 1, 700.18, 700.18, 2028, coordinate0, false);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(1, veiculo1.getVelocidade());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals("RM='Lp?7M71NK'5P.", veiculo1.getMatricula());
      assertEquals("RM='Lp?7M71NK'5P.", veiculo1.getMarca());
      assertEquals(1, veiculo0.getVelocidade());
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals("z6:YB2j)w&qOtG3", veiculo1.getNIF());
      assertEquals(700.18, veiculo0.getConsumo(), 0.01);
      assertEquals(700.18, veiculo0.getPreco(), 0.01);
      assertEquals(2028, veiculo0.getAutonomia());
      assertEquals(2028, veiculo1.getAutonomia());
      assertEquals(700.18, veiculo1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo("pIYS", "Classifica\u00E7\u00E3o: ", "pIYS", (-1598), (-1598), 70.0, 760, (Coordinate) null, false);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals((-1598.0), veiculo1.getPreco(), 0.01);
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo1.getMatricula());
      assertEquals(760, veiculo1.getAutonomia());
      assertEquals(70.0, veiculo0.getConsumo(), 0.01);
      assertEquals("pIYS", veiculo1.getMarca());
      assertEquals("pIYS", veiculo1.getNIF());
      assertEquals((-1598), veiculo1.getVelocidade());
      assertEquals(760, veiculo0.getAutonomia());
      assertEquals((-1598), veiculo0.getVelocidade());
      assertEquals((-1598.0), veiculo0.getPreco(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setClassificacao(2428);
      veiculo0.clone();
      assertEquals(2428, veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setClassificacao((-801));
      veiculo0.clone();
      assertEquals((-801), veiculo0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1), (-1));
      Veiculo veiculo0 = new Veiculo("I", "~+e`&x", "", (-2349), 1.0, (-1), 1, coordinate0, true);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(1.0, veiculo0.getPreco(), 0.01);
      assertEquals("I", veiculo1.getMarca());
      assertEquals(1, veiculo0.getAutonomia());
      assertEquals(1.0, veiculo1.getPreco(), 0.01);
      assertEquals((-2349), veiculo1.getVelocidade());
      assertTrue(veiculo1.getDisponibilidade());
      assertEquals(1, veiculo1.getAutonomia());
      assertEquals((-1.0), veiculo0.getConsumo(), 0.01);
      assertEquals((-2349), veiculo0.getVelocidade());
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals("~+e`&x", veiculo1.getMatricula());
      assertEquals("", veiculo1.getNIF());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1917.1003, 0.0);
      Veiculo veiculo0 = new Veiculo("", "", "", (-26), 1917.1003, 1917.1003, (-26), coordinate0, false);
      Veiculo veiculo1 = veiculo0.clone();
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals((-26), veiculo0.getVelocidade());
      assertEquals((-26), veiculo0.getAutonomia());
      assertEquals((-26), veiculo1.getAutonomia());
      assertEquals((-26), veiculo1.getVelocidade());
      assertEquals(1917.1003, veiculo1.getPreco(), 0.01);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(1917.1003, veiculo0.getPreco(), 0.01);
      assertEquals(1917.1003, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarroJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=0.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "R2ydB$vMXb;)S/3p9");
      Coordinate coordinate0 = new Coordinate(0.4, 2023.2466475754154);
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro(coordinate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPeJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPe((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=0.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "{7,F<ll1x]43EGf");
      Coordinate coordinate0 = new Coordinate(2901.355526131969, 2901.355526131969);
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPe(coordinate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=0.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Dispon\u00EDvel: ");
      Coordinate coordinate0 = new Coordinate(2901.355526131969, 4.0);
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPe(coordinate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.setDatasAlugueres((List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setMarca((String) null);
      // Undeclared exception!
      try { 
        veiculo1.equals(veiculo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3648.0), 0);
      Veiculo veiculo0 = new Veiculo("main.java.Veiculo", "Data de fim: ", "main.java.Veiculo", 0, 0, 0, 0, coordinate0, false);
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo(2.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1126), (-1126));
      Veiculo veiculo0 = new Veiculo("", "", "Lt@`u_'#<ot1Z8-v;", (-85), (-85), (-85), (-1126), coordinate0, false);
      double double0 = veiculo0.getPreco();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals((-85), veiculo0.getVelocidade());
      assertEquals("", veiculo0.getMarca());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("", veiculo0.getMatricula());
      assertEquals("Lt@`u_'#<ot1Z8-v;", veiculo0.getNIF());
      assertEquals((-1126), veiculo0.getAutonomia());
      assertEquals((-85.0), double0, 0.01);
      assertEquals((-85.0), veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2516.903303852492), 1);
      Veiculo veiculo0 = new Veiculo("", "", "Data de fim: ", 1, 60.0, 0.0, 0, coordinate0, true);
      veiculo0.getPosicao();
      assertEquals(1, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals("Data de fim: ", veiculo0.getNIF());
      assertEquals("", veiculo0.getMarca());
      assertEquals("", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(60.0, veiculo0.getPreco(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-667.5673826037607), (-1964.19));
      Veiculo veiculo0 = new Veiculo("4-> gp&;.4k<g-P-}", "4-> gp&;.4k<g-P-}", "", (-2942), (-2942), (-1964.19), (-2942), coordinate0, true);
      int int0 = veiculo0.getAutonomia();
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals((-2942.0), veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-1964.19), veiculo0.getConsumo(), 0.01);
      assertEquals("4-> gp&;.4k<g-P-}", veiculo0.getMarca());
      assertEquals((-2942), int0);
      assertEquals("", veiculo0.getNIF());
      assertEquals("4-> gp&;.4k<g-P-}", veiculo0.getMatricula());
      assertEquals((-2942), veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-6589), (-1.0));
      Veiculo veiculo0 = new Veiculo("]2^:t;?[ul?t}{aAM='", "Classifica\u00E7\u00E3o: ", "Classifica\u00E7\u00E3o: ", (-456), (-1.0), (-456), (-6589), coordinate0, true);
      String string0 = veiculo0.getMarca();
      assertEquals((-1.0), veiculo0.getPreco(), 0.01);
      assertEquals("]2^:t;?[ul?t}{aAM='", string0);
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getMatricula());
      assertEquals("Classifica\u00E7\u00E3o: ", veiculo0.getNIF());
      assertEquals((-456), veiculo0.getVelocidade());
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals((-456.0), veiculo0.getConsumo(), 0.01);
      assertEquals((-6589), veiculo0.getAutonomia());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3546.33435045), 0.0);
      Veiculo veiculo0 = new Veiculo("RM='Lp?7M71NK'5P.", "RM='Lp?7M71NK'5P.", "z6:YB2j)w&qOtG3", 1, 700.18, 700.18, 2028, coordinate0, false);
      int int0 = veiculo0.getVelocidade();
      assertEquals(2028, veiculo0.getAutonomia());
      assertEquals(700.18, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(700.18, veiculo0.getPreco(), 0.01);
      assertEquals("RM='Lp?7M71NK'5P.", veiculo0.getMatricula());
      assertEquals(1, int0);
      assertEquals("RM='Lp?7M71NK'5P.", veiculo0.getMarca());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals("z6:YB2j)w&qOtG3", veiculo0.getNIF());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3546.33435045), 0.0);
      Veiculo veiculo0 = new Veiculo("RM='Lp?7M71NK'5P.", "RM='Lp?7M71NK'5P.", "z6:YB2j)w&qOtG3", 1, 700.18, 700.18, 2028, coordinate0, false);
      String string0 = veiculo0.getMatricula();
      assertEquals(2028, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(700.18, veiculo0.getConsumo(), 0.01);
      assertEquals(1, veiculo0.getVelocidade());
      assertEquals("RM='Lp?7M71NK'5P.", string0);
      assertEquals("RM='Lp?7M71NK'5P.", veiculo0.getMarca());
      assertEquals(700.18, veiculo0.getPreco(), 0.01);
      assertEquals("z6:YB2j)w&qOtG3", veiculo0.getNIF());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-65.875447781));
      Veiculo veiculo0 = new Veiculo("?EBSnO{d", "hOk|E@' ?a(D", "?EBSnO{d", (-1), 0.0, (-65.875447781), (-1), coordinate0, false);
      double double0 = veiculo0.getConsumo();
      assertEquals((-1), veiculo0.getAutonomia());
      assertEquals("hOk|E@' ?a(D", veiculo0.getMatricula());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("?EBSnO{d", veiculo0.getNIF());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("?EBSnO{d", veiculo0.getMarca());
      assertEquals((-65.875447781), double0, 0.01);
      assertEquals((-1), veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1212, 0.0);
      Veiculo veiculo0 = new Veiculo("L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", "L@9dU5YL9]oA1&", 1212, 1212, 990.36062, (-203), coordinate0, true);
      int int0 = veiculo0.getClassificacao();
      assertEquals(990.36062, veiculo0.getConsumo(), 0.01);
      assertEquals((-203), veiculo0.getAutonomia());
      assertEquals(1212, veiculo0.getVelocidade());
      assertEquals(1212.0, veiculo0.getPreco(), 0.01);
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3546.33435045), 0.0);
      Veiculo veiculo0 = new Veiculo("RM='Lp?7M71NK'5P.", "RM='Lp?7M71NK'5P.", "z6:YB2j)w&qOtG3", 1, 700.18, 700.18, 2028, coordinate0, false);
      boolean boolean0 = veiculo0.getDisponibilidade();
      assertEquals(700.18, veiculo0.getConsumo(), 0.01);
      assertEquals(2028, veiculo0.getAutonomia());
      assertEquals(700.18, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertEquals(1, veiculo0.getVelocidade());
      assertEquals("RM='Lp?7M71NK'5P.", veiculo0.getMarca());
      assertEquals("RM='Lp?7M71NK'5P.", veiculo0.getMatricula());
      assertEquals("z6:YB2j)w&qOtG3", veiculo0.getNIF());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getNIF();
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      veiculo0.setClassificacao((-1942));
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals((-1942), veiculo0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setDisponibilidade(true);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertFalse(boolean0);
      assertTrue(veiculo1.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertTrue(boolean0);
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0, veiculo1.getAutonomia());
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo1.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setConsumo(1758.0153);
      Veiculo veiculo1 = new Veiculo();
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals(1758.0153, veiculo0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setPreco(70.0);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals(70.0, veiculo1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      veiculo0.setVelocidade((-3032));
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals((-3032), veiculo0.getVelocidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      veiculo0.setNIF("!");
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertFalse(veiculo1.equals((Object)veiculo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate((-1731.171265), (-1018));
      Veiculo veiculo1 = new Veiculo("&", "{+r8leLK9+\"#", "*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", (-3032), 0, (-1731.171265), (-3032), coordinate0, false);
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertEquals("{+r8leLK9+\"#", veiculo1.getMatricula());
      assertFalse(veiculo1.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo1.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals((-1731.171265), veiculo1.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals("&", veiculo1.getMarca());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo1.getPreco(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", veiculo1.getNIF());
      assertEquals((-3032), veiculo1.getVelocidade());
      assertEquals((-3032), veiculo1.getAutonomia());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(2901.355526131969, 2901.355526131969);
      boolean boolean0 = veiculo0.equals(coordinate0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.equals((Object) null);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(boolean0);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.equals(veiculo0);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      Coordinate coordinate0 = new Coordinate(0.4, 0.4);
      veiculo1.setPosicao(coordinate0);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setAutonomia(2530);
      boolean boolean0 = veiculo0.verificaAutonomia(0, 1784);
      assertEquals(2530, veiculo0.getAutonomia());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia((-1), 334);
      assertTrue(boolean0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      boolean boolean0 = veiculo0.verificaAutonomia(1586, 1586);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(0.4, 0.4);
      veiculo0.tempoAteVeiculoPe(coordinate0);
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      double double0 = veiculo0.custoViagem((-1937.00894603));
      assertEquals(0, veiculo0.getVelocidade());
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(0.05, 0.05);
      int int0 = veiculo0.tempoAteVeiculoPeJa(coordinate0);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, int0);
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertEquals(0, veiculo0.getAutonomia());
      assertFalse(veiculo0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.hashCode();
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      assertTrue(veiculo1.equals((Object)veiculo0));
      
      veiculo1.setMatricula("v$^");
      boolean boolean0 = veiculo0.equals(veiculo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      veiculo0.setDatasAlugueres(list0);
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, veiculo0.getVelocidade());
      assertEquals(0.0, veiculo0.getPreco(), 0.01);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0.0, veiculo0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1, 1);
      Veiculo veiculo0 = new Veiculo("+h", "+h", "+h", 1, 1, 1, 1, coordinate0, true);
      int int0 = veiculo0.tempoViagemCarroJa(coordinate0);
      assertEquals(1, veiculo0.getAutonomia());
      assertEquals(1.0, veiculo0.getPreco(), 0.01);
      assertEquals(1.0, veiculo0.getConsumo(), 0.01);
      assertEquals(0, veiculo0.getClassificacao());
      assertEquals(0, int0);
      assertTrue(veiculo0.getDisponibilidade());
      assertEquals(1, veiculo0.getVelocidade());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo((String) null, "", (String) null, 1, (-1.0), (-1.0), 0, (Coordinate) null, false);
      // Undeclared exception!
      try { 
        veiculo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1, 1);
      Veiculo veiculo0 = new Veiculo("+h", "+h", "+h", 1, 1, 1, 1, coordinate0, true);
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.abastecerVeiculo(1.0);
      boolean boolean0 = veiculo1.equals(veiculo0);
      assertEquals(2, veiculo1.getAutonomia());
      assertFalse(boolean0);
  }
}
